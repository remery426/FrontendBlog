{
  "p1":"Welcome to my blog post about this blog app.  I'm going to start by talking about some of the technology I chose and I why I decided to use it. For the front end I decided to use React. React seemed like a good a choice for this particular project because it is a relatively small project and react is pretty easy to get up and running. React generally isn't as opinionated as other front end frameworks which can be a bit of double edged sword for large teams in production environments but for a small personal project is a non-issue.  For the backend I decided to use Express and Mongo.  I chose this for a few reasons. First of all I write backend JS everyday and I just like it.  Second our data doesn't involve too many relationships for a nosql db to be a solid choice. A larger blog app with more functionality could end up  having a lot more relationships, for example users can view posts they like, reply to comments, follow specific bloggers etc.. This might make a relational database a better choice but for the our needs mongo will work quite nicely. With that in mind let's dive into some code.",
  "p2": "I started by building and deploying a backend api to hold the data. Let's start by looking at some routes.",
  "img1": "http://i281.photobucket.com/albums/kk212/emeryryan1/routesimg.png",
  "p3": "get '/user' allows use to get the user that is currently logged in.  I decided that I wanted users to have to create an account to post on my blog. This route gets the logged in user. Pretty straightforward. Moving on to post '/login', this route both logs in and creates the user if the user does not already exist. Normally I would create separate login and register routes/logic for a few reasons, the most obvious being users might inadvertently create new accounts if they mistype their username. I just combined the functions in the interest of time. I use a third party service called passport for authentication.  We won't dive too much into that but within this passport function, we either hash the password and create a new logged in user or find a user by username and see if the passwords match, then put the user in session based on the result. Our post '/comment' route creates a comment then adds that comment to the signed in users profile. Currently adding comments to our user model doesn't do anything for us, but if we wanted to lookup comments by user later, this would improve our performance quite a bit.  Normally the comment would have a blog post associated with it as well but given that there is only going to be one post in our current blog,  we will just be listing all comments. If we wanted to expand the functionality of the blog, this would be the first thing to change. get '/comments' just grabs all of the comments for us. Not much to say about this one.",
  "p4" : "Quickly lets take a look at the models",
  "img2":"http://i281.photobucket.com/albums/kk212/emeryryan1/usermodel.png",
  "p5": "The user model is pretty straightforward it has a username, password and array to store comments the user has made.",
  "img3": "http://i281.photobucket.com/albums/kk212/emeryryan1/comment.png",
  "p6": "The comment model is also relatively straightforward I decided to include both a userid('user')and username('author'). This allows us to get the users name to display with the comment but also let's us easily look up the user in mongo if we want the whole object.  Not super necessary for our purposes but could help down the road",
  "p7": "Since the front end code is relatively straightforward,we will mostly be calling the api created previously, we aren't going to look at any code although it will all be available on github. The only thing I want to mention is that I decided to build the front-end without redux. Redux can be an extremely useful tool for managing state but in our case it seemed unecessary. For a larger project where we want to share information between many view across the app, redux would be extremely helpful. Honsetly I can't imagine not using redux in a situation like that, but redux can take a bit of time to set up and would probably be overkill for us."
}
